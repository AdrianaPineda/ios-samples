//
//  ContentView.swift
//  Memorize
//
//  Created by Adriana Pineda on 10/6/21.
//

/**
 body is a function (first class citizen)
 body is calculated everytime is needed, its not stored in memory
 */

import SwiftUI

struct ContentView: View {
    @State var emojis = ["üôã‚Äç‚ôÄÔ∏è"]
    @State var maxEmojiCount = 150

    // 'some View': something that behaves like a View
    var body: some View {
//        RoundedRectangle(cornerRadius: 25)
//            .stroke(lineWidth: 3)
//            .padding(.horizontal)
//            .foregroundColor(.red)
        VStack {
            Text("Memorize!").font(.largeTitle)
            ScrollView {
                // LazyVGrid: lazy about accessing the body vars of all its views
                // We only get the value of a body var of views that actually appear on screen
                // Only accesing body var when its absolutely necessary
                let emojiCount = min(maxEmojiCount, emojis.count)
                LazyVGrid(columns: [GridItem(.adaptive(minimum: 65))]) {
                    // we cannot do for loops here, but we can:
                    ForEach(emojis[0..<emojiCount], id: \.self) { emoji in
                        CardView(content: emoji)
                            .aspectRatio(2/3, contentMode: .fit)
                    }
                }

            }
            .foregroundColor(.red)
            Spacer()
            HStack {
                carsTheme
                Spacer()
                foodTheme
                Spacer()
                animalsTheme
                Spacer()
                flagsTheme
//                removeCard
//                Spacer()
//                addCard
            }
            .font(.largeTitle)
            .padding(.horizontal)
        }
        .padding(.horizontal)

    }

//    var removeCard: some View {
//        Button {
//            if emojiCount > 1 {
//                emojiCount -= 1
//            }
//        } label: {
//            Image(systemName: "minus.circle")
////            VStack {
////                Text("Remove")
////                Text("Card")
////            }
//        }
//    }

//    var addCard: some View {
//        Button {
//            if emojiCount < emojis.count {
//                emojiCount += 1
//            }
//        } label: {
//            Image(systemName: "plus.circle")
////            VStack {
////                Text("Add")
////                Text("Card")
////            }
//        }
//    }

    var carsTheme: some View {
        ThemeView(imageName: "car", text: "Cars") {
            emojis = ["üöï", "üöÉ", "üõµ", "üöÇ", "üöÑ", "üöÖ", "üöÜ", "üöá", "üöà", "üöâ", "üöä", "üöù", "üöû", "üöã", "üöå", "üöç", "üöé", "üöê", "üöë", "üöí", "üöì", "üöî", "üöñ", "üöó", "üöò", "üöô", "üõª", "üöö", "üöõ", "üöú"].shuffled()
        }
    }

    var foodTheme: some View {
        ThemeView(imageName: "applelogo", text: "Food") {
            emojis = ["üçî", "üçá", "üçà", "üçâ", "üçä", "üçã", "üçå", "üçç", "ü•≠", "üçé", "üçè", "üçê", "üçë", "üçí", "üçì", "ü´ê", "ü•ù", "üçÖ", "ü´í", "ü••", "ü•ë", "ü•ï", "üåΩ", "üå∂Ô∏è", "ü´ë", "ü•í", "ü•¨", "ü•¶", "üßÑ", "üßÖ", "üçÑ", "ü•ú", "ü´ò", "üå∞", "üçû"].shuffled()
        }
    }

    var animalsTheme: some View {
        ThemeView(imageName: "ant", text: "Animals") {
            emojis = ["ü¶ç", "ü¶ß", "üê∂", "üêï", "ü¶Æ", "üêï‚Äçü¶∫", "üê©", "üê∫", "ü¶ä", "ü¶ù", "üê±", "üêà", "üêà‚Äç‚¨õ", "ü¶Å", "üêØ", "üêÖ", "üêÜ", "üê¥", "üêé", "ü¶Ñ", "ü¶ì", "ü¶å", "ü¶¨", "üêÆ", "üêÇ", "üêÉ", "üêÑ", "üê∑", "üêñ", "üêó", "üêè", "üêë", "üêê", "üê™", "üê´", "üêì", "ü¶â", "üê•", "ü¶©", "ü¶É", "ü¶ú", "ü¶Ü", "üïä", "ü¶Ö", "ü¶¢"].shuffled()
        }
    }

    var flagsTheme: some View {
        ThemeView(imageName: "flag.2.crossed", text: "Flags") {
            emojis = ["üè≥Ô∏è‚Äçüåà", "üè≥Ô∏è‚Äç‚ößÔ∏è", "üè¥‚Äç‚ò†Ô∏è", "üá¶üá®", "üá¶üá©", "üá¶üá™", "üá¶üá´", "üá¶üá¨", "üá¶üáÆ", "üá¶üá±", "üá¶üá≤", "üá¶üá¥", "üá¶üá∂", "üá¶üá∑", "üá¶üá∏", "üá¶üáπ", "üá¶üá∫", "üá¶üáº", "üá¶üáΩ", "üá¶üáø", "üáßüá¶", "üáßüáß", "üáßüá©", "üáßüá™", "üáßüá´", "üáßüá¨", "üáßüá≠", "üáßüáÆ", "üáßüáØ", "üáßüá±", "üáßüá≤", "üáßüá≥", "üáßüá¥", "üáßüá∂", "üáßüá∑", "üáßüá∏", "üáßüáπ", "üáßüáª", "üáßüáº", "üáßüáæ", "üáßüáø", "üá®üá¶", "üá®üá®", "üá®üá©", "üá®üá´", "üá®üá¨", "üá®üá≠", "üá®üáÆ", "üá®üá∞", "üá®üá±", "üá®üá≤", "üá®üá≥", "üá®üá¥", "üá®üáµ", "üá®üá∑", "üá®üá∫", "üá®üáª", "üá®üáº", "üá®üáΩ", "üá®üáæ", "üá®üáø", "üá©üá™", "üá¨üá¨", "üá¨üá≠", "üá¨üáÆ", "üá¨üá±", "üá¨üá≤", "üá¨üá≥", "üá¨üáµ", "üá¨üá∂", "üá¨üá∑", "üá¨üá∏", "üá¨üáπ", "üá¨üá∫", "üá¨üáº", "üá¨üáæ", "üá≠üá∞", "üá≠üá≤", "üá≠üá≥", "üá≠üá∑", "üá≠üáπ", "üá≠üá∫", "üáÆüá®", "üáÆüá©", "üáÆüá™", "üáÆüá±", "üáÆüá≤", "üáÆüá≥", "üáÆüá¥", "üáÆüá∂", "üáÆüá∑", "üáÆüá∏", "üáÆüáπ", "üáØüá™", "üáØüá≤"].shuffled()
        }
    }
}

struct ThemeView: View {
    var imageName: String
    var text: String
    var action: () -> Void

    var body: some View {
        VStack {
            Button {
                action()
            } label: {
                Image(systemName: imageName)
            }
            .font(.title)
            Text(text).font(.caption).foregroundColor(.blue)
        }
    }
}

// Views are immutable
struct CardView: View {
    // `@State` changes var, its now a pointer to a boolean
    // used for temp state or for state that only affects the way the view is displayed
    // without it, we couldn't modify the var
    @State var isFaceUp = true
    var content: String

    var body: some View {
        ZStack { // stacks views on top of each other, from the device towards the user
            let shape = RoundedRectangle(cornerRadius: 20)
            if isFaceUp {
                shape.fill().foregroundColor(.white)
                shape.strokeBorder(lineWidth:3) // strokeBorder does it on the inside
                Text(content)
                    .font(.largeTitle)
                    .lineLimit(nil)
                    .padding() // default padding, it might mean different things for different devices (watch, phone, ipad)
            } else {
                shape.fill()
            }
        }
        .onTapGesture {
            isFaceUp = !isFaceUp
        }
    }
}

// Glues the preview to the ContentView:
// No need to modify it
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
            .preferredColorScheme(.dark)
        ContentView()
            .preferredColorScheme(.light)
    }
}
